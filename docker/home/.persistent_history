exit
exit
source ~/.bashrc
exit
clear
nvim ~/.common_commands
git clone 
git clone https://github.com/sagidana/Dotfiles.git
cd Dotfiles/
ll
cp -r .commands/ ~/
ll
ll ~
bat
nvim ~/.bash
nvim ~/.bashrc 
mkdir ~/scripts
exit
gsettings set org.gnome.desktop.wm.preferences button-layout :
exit
exit
exit
gsettings reset org.gnome.desktop.wm.preferences button-layout
sudo apt install gnome-tweak-tool
clear
clear
exit
exit
exit
exit
exi
cd ~/github/
ll
cd alacritty
exit
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
nvim ~/.bashrc 
. "$HOME/.cargo/env"
rustup update stable
apt install cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev libxkbcommon-dev python3
sudo apt install cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev libxkbcommon-dev python3
cargo build --release
infocmp alacritty
sudo tic -xe alacritty,alacritty-direct extra/alacritty.info
infocmp alacritty
sudo update-desktop-database
scdoc < extra/man/alacritty-bindings.5.scd | gzip -c | sudo tee /usr/local/share/man/man5/alacritty-bindings.5.gz > /dev/null
sudo apt install scdoc
scdoc < extra/man/alacritty-bindings.5.scd | gzip -c | sudo tee /usr/local/share/man/man5/alacritty-bindings.5.gz > /dev/null
sudo update-desktop-database
scdoc < extra/man/alacritty-bindings.5.scd | gzip -c | sudo tee /usr/local/share/man/man5/alacritty-bindings.5.gz > /dev/null
exit
echo "source $(pwd)/extra/completions/alacritty.bash" >> ~/.bashrc
exit
exit
exit
sudo update-alternatives --config x-terminal-emulator
source ~/.bashrc
sudo update-alternatives --config x-terminal-emulator
exit
sudo update-alternatives --config x-terminal-emulator
which alacritty 
sudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator /usr/local/bin/alacritty 50
sudo update-alternatives --config x-terminal-emulator
exit
exit
clear
nvim
cd gi
cd ~/github/
ll
cd knw
cd knowit/
ll
python knowit.py 
clear
sudo apt install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git
nvim ~/.bash
nvim ~/.bashrc 
source ~/.bashrc
v
clear
exit
sudo apt install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev git
$ curl https://pyenv.run | bash
curl https://pyenv.run | bash
nvim ~/.bashrc
source ~/.bashrc
nvim ~/.bashrc 
source ~/.bashrc
pyenv 
exit
pyenv install 3.12
nvim ~/.bashrc 
pyenv global 3.12
pip install requests
python
clear
cd ~/scripts/
ll
nvim doc
chmod +x doc
./doc 
ll
./doc 
doc
which python
nvim doc 
doc
doc
cd github/
cd knowit/
ll
nvim knowit.py 
python knowit.py 
python knowit.py  --help
mkdir ~/notes
rm -er ~/notes
rm -r ~/notes
git clone https://github.com/sagidana/Notes.git ~/notes
ll
doc
cd ~/notes
ls
python knowit.py -a browse
sudo apt install bat
python knowit.py -a browse
bat
sudo apt remove bat
sudo apt install bat
ln -s /usr/bin/batcat ~/.local/bin/bat
bat
batcat 
nvim ~/.bashrc 
source ~/.bashrc
bat
python knowit.py -a browse
nvim
clear
cd ~
ll
nvim ~/.tmux.conf 
python knowit.py -a browse
nvim ~/.bashrc 
source ~/.bashrc
clear
nvim ~/init 
source ~/.bashrc
nvim ~/.bashrc
knowit 
nvim ~/.bashrc 
source ~/.bashrc
knowit -a brose
knowit -a browse
nvim ~/.bash
nvim ~/.bashrc 
source ~/.bashrc
knowit -a browse
nvim ~/.tmux.conf 
nvim ~/scripts/doc 
ll
nvim ~/.tmux.conf 
nvim ~/scripts/doc 
ll
nvim ~/scripts/doc 
echo "test" | doc
ll
nvim doc.md 
rm doc.md 
nvim ~/tm
nvim ~/.tmux.conf 
exit
kjj:q
eix
texit
ll
clear
cc
c
clear
exit
htop
htop
sudo apt  install htop  # version 3.2.2-2
htop
nvim
clear
python
clear
ll
cd github/
ll
cd ~
ll
exit
lear
clear
mkdir docker
nvim Dockerfile
docker build .
docker build . -t test
sudo docker build . -t test
docker images
sudo docker images
sudo docker rmi dbef68d1d14a
sudo docker images
clear
sudo groupadd docker
sudo usermod -aG docker $USER
exit
ll
cd docker/
ll
mv ~/Dockerfile .
ll
docker build . -t test
docker images
exit
nvim ~/.tmux.conf 
exit
nvim ~/tm
nvim ~/.tmux.conf 
cd ~/github/
ll
make && sudo make install
sudo apt install libevent-dev ncurses-dev build-essential bison pkg-confi
sudo apt install libevent-dev ncurses-dev build-essential bison pkg-config
sh autogen.sh
sudo apt-get install autotools-dev
sudo apt-get install automake
sh autogen.sh
./configure
make && sudo make install
newgrp docker
tmux att
sudo apt remove tmux
cd github/
cd tmux/
exit
tmux
make && sudo make install
tmux
exit
cd docker/
ll
docker images
exit
docker images
exit
reboot
nvim Dockerfile 
cd docker
docker images
docker build . -t test
docker images
docker system prune
docker images
docker images
exit
cd github/
ll
clear
ll
cd ~/docker/
ll
nvim ~/.bashrc 
exit
t --entrypoint bash <image-name-or-id>exit
exit
docker run --rm -it --entrypoint bash test
docker build . -t test
exit
nvim ~/.commands/docker_18.z
nvim ~/.commands/docker_17.z 
df -h
ll
docker run --rm -it --entrypoint bash test
clear
docker system prune
docker run --rm -it --entrypoint bash test
docker build . -t test
docker ps
docker ps --all
docker iamge
docker images
docker run --rm -it --entrypoint bash test
docker run --rm -it test
clear
docker run --rm -it test
docker system prune
ll
mkdir home
#cp ~/.config/nvim/init.vim ./home/
mkdir home/.config/nvim
mkdir -p home/.config/nvim
#cp ~/.config/nvim/init.vim ./home/.config/nvim/
cp ~/.config/nvim/init.vim ./home/.config/nvim/
docker build . -t test
docker run -v home:/root--rm -it test
docker run --rm -it test
docker run -v home:/root--rm -it test
docker run --rm -it test
docker run -v ./home/.config/:/root/.config --rm -it test
ll
nvim run.sh
chmod +x run.sh 
./run.sh 
clear
./run.sh 
exit
cd docker/
docker images
docker rmi test
docket images
docker images
docker system prune
./run.sh 
docker images
exit
cd docker/
exit
tmux
./run.sh 
ll
cd home/
ll
nvim ~/.bashrc
nvim ~/.bashrc 
docker build . -t test
nvim .bashrc
ll
ll
cd home
ll
cp -r ~/github/Dotfiles/.commands/ .
ll
nvim
ll
cp ~/.tmux.conf .
nvim Dockerfile 
exit
tmux
nvim
ll
tmux
./run.sh 
tmux
cd docker/k
cd docker/
./run.sh 
nvim Dockerfile 
./run.sh 
nvim Dockerfile 
./run.sh 
nvim Dockerfile 
./run.sh 
nvim Dockerfile 
./run
./run.sh 
nvim Dockerfile 
./run.sh 
nvim Dockerfile 
./run.sh 
ll
exit
nvim
nvim ~/.bashrc 
nvim home/.bashrc 
tmux
tmux -V
nvim Dockerfile 
./run
./run.sh 
nvim Dockerfile 
./run.sh 
nvim Dockerfile 
./run.sh 
docker system prune
docker images
docker rmi test
ll
df -h
./run.sh 
ll
nvim run.sh 
./run.sh 
nvim run.sh 
mkdir ~/projects
touch a ~/projects/
./run.sh 
ll
rm a 
ll
ll ~/projects/a 
nvim ~/DO
nvim Dockerfile 
nvim run.sh 
exit
cd projects/
ll
rm a
sudo touch test
l
ls
exit
cd projects/
ll
cat test 
./run.sh 
nvim ./run.sh 
./run.sh 
ll
cd gi
cd ~/gi
cd ~/github/
ll
cd Dotfiles/
ll
mkdir docker
ll
cp -r ~/docker/* docker/
ll
cd docker/
ll
cd home/
ll
cd ..
ll
cd ..
ll
git status
git remote -v
git remote set-url --add --push origin https://github.com/sagidana/Dotfiles.git
git remote set-url --add --push origin https://gitlab.com/sagidana/Dotfiles.git
git remote -v
git status
git add docker/
git status
git commit -m "adding docker solution"
git config --global user.email "sagidana1@gmail.com"
git config --global user.name "Sagi Dana"
git commit -m "adding docker solution"
git push
cd ~/dock
cd ~/docker/
ll
./run.sh 
nvim run.sh 
./run.sh 
nvim ~/.tmux.conf 
nvim home/.tmux.conf 
nvim ~/.tm
nvim ~/.tmux.conf 
nvim home/.tmux.conf 
./run.sh 
nvim Dockerfile 
./run.sh 
nvim Dockerfile 
./run.sh 
nvim ~/.persistent_history 
nvim ./run.sh 
./run.sh 
cat ~/.persistent_history 
clear
ll
nvim Dockerfile 
docker build . -t run
docker build . -t run --no-cache
ll
cp ~/.persistent_history .
nvim Dockerfile 
docker build . -t run
nvim Dockerfile 
docker build . -t run
./run.sh 
ll
rm .persistent_history 
nvim run.sh 
nvim Dockerfile 
./run.sh 
nvim
nvim run.sh 
./run.sh 
nvim ~/ru
ll
nvim run.sh 
./run.sh 
nvim Dockerfile 
./run.sh 
nvim 
